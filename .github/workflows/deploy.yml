name: CI/CD with Terraform

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.AWS_TF_STATE_BUCKET_NAME }}" -backend-config="region=${{ env.AWS_REGION }}"
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan \
            -var="region=${{ env.AWS_REGION }}" \
            -var="public_key=${{ secrets.AWS_SSH_KEY_PUBLIC }}" \
            -var="private_key=${{ secrets.AWS_SSH_KEY_PRIVATE }}" \
            -var="key_name=deployer-key" \
            -var="subnet_id=${{ secrets.AWS_SUBNET_ID }}" \
            -out=PLAN
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve PLAN
        working-directory: ./terraform

      - name: Set output
        id: set-ip
        run: |-
          echo "::set-output name=instance_public_ip::$(terraform output -raw instance_public_ip)"
        working-directory: ./terraform

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set IP env variable
        run: echo "SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: 950776050005.dkr.ecr.ap-south-1.amazonaws.com/example-node-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REPOSITORY:$IMAGE_TAG .
          docker push $REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp

      - name: Deploy Docker Image to EC2
        env:
          SERVER_PUBLIC_IP: ${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}
          REPOSITORY: 950776050005.dkr.ecr.ap-south-1.amazonaws.com/example-node-app
          IMAGE_TAG: ${{ github.sha }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          script: |

            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo apt-get install -y unzip
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -o awscliv2.zip

            sudo ./aws/install --update

            echo "Repository: $REPOSITORY"
            echo "Image Tag: $IMAGE_TAG"
            echo "Full Image: $REPOSITORY:$IMAGE_TAG"

            if [ -z "$REPOSITORY" ]; then echo "REPOSITORY is empty"; exit 1; fi
            if [ -z "$IMAGE_TAG" ]; then echo "IMAGE_TAG is empty"; exit 1; fi

            sudo systemctl start docker
            sudo docker pull $REPOSITORY:$IMAGE_TAG
            docker run -d --name myappcontainer -p 80:8080 $REPOSITORY:$IMAGE_TAG
